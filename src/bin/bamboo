#!/usr/bin/env luajit

require 'posix'
require 'signal'
require 'bamboo'


local readSettings = require('bamboo.utils').readSettings

SCRIPT_PIDS = {}


signal.signal("SIGINT", function (...)
    for script, pid in pairs(SCRIPT_PIDS) do
        posix.kill(pid)
    end
end)

signal.signal("SIGTERM", function (...)
	print('receive SIGTERM, os.exit()')
	os.exit()
end)
-- signal.signal("SIGCLD", 'ignore')

------------------------------------------------------------------------------
-- load configuration
local config = {}

------------------------------------------------------------------------------
--
function parse_args(arg)
    if #arg == 0 then return nil end

	-- if has only command
	if #arg == 1 then return arg[1], {} end
	-- arg[1] is the command name
    local cmd = table.remove(arg, 1)
    local settings = {}
    local last_opt = nil

	-- make the liner command line args become key value pairs
	local function beatArgs(arg)
		for i, opt in ipairs(arg) do
		    local token = opt:match("%-+([a-z%-_]+)")

		    if token then
		        last_opt = token
		    else
		        settings[last_opt] = opt
		    end
		end
	end

	local kv_start = -1
    -- all command options are allowed in two style: -xx yy -foo bar or xx yy zz
	-- now, arg[1] is the options
	if arg[1]:sub(1, 1) == '-' then 
		beatArgs(arg)
	else
		-- if arg[1] doesn't start with -, 
		-- if the lenght of arg is larger than 2, check the following args
		for i = 1, #arg do
			if arg[i]:sub(1,1) == '-' then
				kv_start = i
				break
			end
		end 

		-- the linear part
		if kv_start < 0 then
			-- push all args into setting
			for i = 1, #arg do
				settings[#settings + 1] = arg[i]
			end
		else
			-- push the following args into settings linearly
			for i = 1, kv_start - 1 do
				settings[#settings + 1] = arg[i]
			end
		end

		if kv_start > 0 then
			-- the key value part
			local rest = {}
			for i = kv_start, #arg do
				rest[#rest + 1] = arg[i]
			end

			-- put the rest part to settings
			beatArgs(rest)		
		end
    end

    return cmd, settings
end


local function run_script(app_dir, script)
    local pid = posix.fork()

    if pid == 0 then
        -- script is the file name to execute
        posix.execp("bamboo_handler", app_dir, script)
    else
        print("Started " .. script .. " PID " .. pid)
        SCRIPT_PIDS[script] = pid
    end

    return pid
end


local function run_app(app_dir, targets, num)
    local pid
    local running = {}

    for script, pid in pairs(SCRIPT_PIDS) do
        running[script] = posix.kill(pid, 0) == 0
    end

    for _, script in ipairs(targets) do
        if not running[script] then
            	for i=1, tonumber(num) do
		run_script(app_dir, script)
		end	
        end
    end
end

local function run_tests(test_dir, full)
    print("\n---------------- TESTS -----------------")
    local tests = posix.glob(test_dir .. "/*_tests.lua")

    if tests then
        local cmd = "tsc -f "
        if full then cmd = cmd .. "-f " end

        os.execute(cmd .. table.concat(tests, ' '))
    else
        print("\n-------------- NO TESTS ----------------")
        print("  You must work at a startup.")
    end
end


function findDirs(dir_collection, cur_dir )
	local files = posix.dir(cur_dir)
	for i, f in ipairs(files) do
		local path = cur_dir..'/'..f
		local fobj = posix.stat(path)
		if fobj and fobj.type == 'directory' then
			if not f:startsWith('.') then
				table.insert(dir_collection, path)
				findDirs(dir_collection, path)
			end
		end
	end
end




local function wait_on_children(app_dir, targets)
    local dead_count = 0
    local child_count = 0
    local p, msg, ret

	if config.auto_reload_when_code_change and not config.PRODUCTION then
		-------------------------------------------------------
		local inotify = require 'inotify'
		local dirs = { '.' }
		local handle = inotify.init()
		-- watch all subdirs in current project directory
		findDirs(dirs, '.')
		for _, d in ipairs(dirs) do
			-- handle:addwatch(d, inotify.IN_CREATE, inotify.IN_MOVE, inotify.IN_MODIFY, inotify.IN_DELETE)
			handle:addwatch(d, inotify.IN_MODIFY)
		end
		local starttime, laststoptime = 0, 0
		while true do
			starttime = os.time()
			-- block here
			local events = handle:read()
			
			-- ask time distance is larger than 2 seconds
			if starttime - laststoptime > 1 then
				-- kill processes
				for _, ev in ipairs(events) do
					if ev.name:endsWith('.lua') and not (ev.name:startsWith('.') or ev.name:startsWith('#')) then
						print(ev.name .. ' was changed.')
						for script, pid in pairs(SCRIPT_PIDS) do
							local ret = posix.kill(pid)
							if ret == 0 then
								SCRIPT_PIDS[script] = nil
							end
						end
					end
				end
				
				laststoptime = os.time()
				
				-- start processes
				for _, script in ipairs(targets) do
					if not SCRIPT_PIDS[script] then
						run_script(app_dir, script)
					end
				end	
				-------------------------------------------------------
			end
		end
		handle:close()
	else
		-- for PRODUCTION mode and normal develope mode
		repeat
			p, msg, ret = posix.wait(-1)
		until p
		
		for script, pid in pairs(SCRIPT_PIDS) do
			if p == pid then
				print("CHILD DIED " .. script .. " PID " .. p ..":", msg)
				SCRIPT_PIDS[script] = nil
				return script, pid
			end
		end
	end
end


local function makeMD5()
    require 'md5'

    math.randomseed(os.time())
    local num = math.random(1000000, 10000000)
    local md5_str = md5.sumhexa(num)
    local result = ('%s-%s-%s-%s-%s'):format(md5_str:sub(1, 8), md5_str:sub(9, 12), md5_str:sub(13, 16), md5_str:sub(17, 20), md5_str:sub(21, 32))
    -- print(result)
    return result
end

local killProcesses = function (settings)
	local fd = io.popen('ps eaux|grep luajit|grep PWD=$(pwd)', 'r')
	local output = fd:read("*a")
	fd:close()
	-- print(output)

	local cmd_output = output:split('\n')
	local pattern0 = "(%d+).+luajit /usr/local/bin/bamboo start"
	local pattern1 = "(%d+).+luajit /usr/local/bin/bamboo_handler"
	local pid
	for _, part in ipairs(cmd_output) do
		pid = part:match(pattern0)
		print('===>>>>', pid)
		if pid then
			os.execute(('kill -15 %s'):format(pid))
		end
	end

	--[[
	for _, part in ipairs(cmd_output) do
		pid = part:match(pattern1)
		print('===>>>>', pid)
		if pid then
			os.execute(('kill -15 %s'):format(pid))
		end
	end
	--]]
	
	
end

local killAllProcesses = function (settings)
	local fd = io.popen('ps eaux|grep luajit|grep PWD=$(pwd)', 'r')
	local output = fd:read("*a")
	fd:close()
	-- print(output)

	local cmd_output = output:split('\n')
	local pattern0 = "(%d+).+luajit /usr/local/bin/bamboo start"
	local pattern1 = "(%d+).+luajit /usr/local/bin/bamboo_handler"
	local pid
	for _, part in ipairs(cmd_output) do
		pid = part:match(pattern0)
		print('===>>>>', pid)
		if pid then
			os.execute(('kill -9 %s'):format(pid))
		end
	end

	for _, part in ipairs(cmd_output) do
		pid = part:match(pattern1)
		print('===>>>>', pid)
		if pid then
			os.execute(('kill -9 %s'):format(pid))
		end
	end
	
	
end

local startProcesses = function (settings)
	readSettings(config)

	if config.daemon then
		print('bamboo project '.. config.project .. ' started, run as daemon.')
		require 'daemon'
		daemon.daemonize('nochdir,nostdfds,noumask0')
	end


	local appname = config.project
   
	--for i,v in pairs(settings) do print(i,v) end
	-- here, app is a directory pattern string, for glob
	local app_dir = settings.app or './'
	local app = ('%s%s'):format((settings.app or "./"), 'app/handler_*.lua')
	local script_times = {}
	local num = settings[1] or 1

	-- while true do

	local function runit()
		local targets = assert(posix.glob(app))

--[[
--		for _, script in ipairs(targets) do
			if not script_times[script] then
				script_times[script] = os.time() 
			end
		end
--]]

		run_app(app_dir, targets, num)
		local script, pid = wait_on_children(app_dir, targets)
--		local tick = os.time()

--		if tick - script_times[script] < 1 then
--			print("SCRIPT " .. script .. " RESTARTING TOO FAST. Pausing while you fix stuff.")
			posix.sleep(2)
--			tick = os.time()
--		end

--		script_times[script] = tick
	end
	
	if config.PRODUCTION then
		while true do runit() end
	else
		os.execute('')
		runit()
	end

end

local function sendExitCmdViaChannel ()

local zmq = require'bamboo.lib.zmqev'
local ev = require'ev'
local loop = ev.Loop.default
require 'lglib'
local ctx = zmq.init(loop, 1)
local posix = require 'posix'
dofile('settings.lua')

-- define response handler
--[[
local function handle_msg(sock, data)
  print("server response:\n", data)
end
--]]

--cmd_pub_addr = 'tcp://127.0.0.1:1236'
--cmd_sub_addr = 'tcp://127.0.0.1:1237'
local client_pub = cmd_sub_addr
--local client_sub = cmd_pub_addr
print('client_pub', client_pub)
local cmd_pub = ctx:pub()
cmd_pub:bind(client_pub)
--[[
local cmd_sub = ctx:sub(handle_msg)
cmd_sub:sub("")
cmd_sub:bind(client_sub)
--]]
local cb = function ()
  -- send requssage.
  print('---> _cmd_exit_')
  cmd_pub:send('_cmd_exit_')
  
  posix.sleep(1)
  os.exit()
end

-- 先停1秒钟，等zmq通道准备好
local timer = ev.Timer.new(cb, 1)
timer:start(loop)
loop:loop()
print('== Done ==')



end



COMMANDS = {
    help = function(settings)
        print("AVAILABLE COMMANDS:")
        for k,v in pairs(COMMANDS) do
            print(k)
        end
    end,

    test = function(settings)
        local target = settings.from or "tests"
		run_tests(target, settings.full ~= nil)
        
        --if not config.PRODUCTION then
        --else
        --    print "[Warning] Running in PRODUCTION mode, won't run tests."
        --end
    end,
    
    config = function (settings)
    	local home = os.getenv('HOME')
    	local fd = io.open(home + '/.bambooconfig', 'a')
    	for k, v in pairs(settings) do
    		if type(k) == 'string' then
    			fd:write(k + ' = "' + v + '"\n')
    		end
    	end
    end,

    start = function(settings)
		startProcesses(settings)
    end,

    stop = function (settings)
		-- 先杀掉管理进程
		killProcesses()
		-- 再给子进程发送退出信号
		sendExitCmdViaChannel()
    end,
    
    kill = function (settings)
		-- 杀掉所有进程
		killAllProcesses()
    end,

    restart = function (settings)
		-- killProcesses(settings)
		-- send exit directive to procedures now working, it will reborn automatically
		sendExitCmdViaChannel()
		--startProcesses(settings)
    end
}

local extra_cmds = require 'bamboo.cmds'
for k, cmd in pairs(extra_cmds) do
	COMMANDS[k] = cmd
end




function run(cmd, settings)
    local cmd_to_run = COMMANDS[cmd]

    if cmd_to_run then
        cmd_to_run(settings)
    else
        print("ERROR: that's not a valid command")
        print("USAGE: bamboo <command> <options>")
        print("Please input 'bamboo help' to list all available commands.")
    end
end


local cmd, settings = parse_args(arg)
if not cmd then print('No cmd input.'); return  end


run(cmd, settings)

